#!/bin/bash

addMessage() {
    if [ ${#message[@]} -eq 0 ]; then
        message=("WARNING: Some targets already exist.")
    fi

    message+=("$@")
}

getMessage() {
    printf "%s\n" "${message[@]}"
}

question() {
    local msg="$1"
    if [ "$X" ]; then
        zenity --question --no-wrap --text "$msg" || exit 1
    else
        echo "$msg"
        read -r answer
        case "$answer" in
            y | yes) ;;
            *) exit 1;;
        esac
    fi
}

info() {
    local msg="$1"
    if [ "$X" ]; then
        zenity --info --no-wrap --text "$msg"
    else
        echo "$msg"
    fi
}

warning() {
    local msg="$1"
    if [ "$X" ]; then
        zenity --warning --no-wrap --text "$msg"
    else
        echo "WARNING: $msg" >&2
    fi
}

error() {
    local msg="$1"
    if [ "$X" ]; then
        zenity --error --no-wrap --text "$msg"
    else
        echo "*** ERROR: $msg" >&2
    fi
    exit 1
}

progress() {
    local msg="$1"
    if [ "$X" ]; then
        zenity --progress --pulsate --auto-close --auto-kill --text "$msg"
    else
        echo -n "$msg"
        while read -r _; do :; done
        echo
        echo "Done."
    fi
}

if [ ! -r "$1" ]; then
    error "\"$1\" does not exist or is not readable!"
fi

[ ! -t 0 ] && X=1

inputfile="$1"
pwd="$(realpath "${inputfile%/*}")"

# Read in all lines starting with "#::". Those lines I declare to be trigger
# options.
readarray -t OPTS < <(grep "^#::" "$inputfile")

optRelative=
for opt in "${OPTS[@]}"; do
    opt="${opt#\#::}"
    while [ "$opt" != "${opt# }" ]; do
        opt="${opt# }"
    done

    case "$opt" in
        -r | --relative)
            # Create symlinks relative to link location
            optRelative="--relative"
            ;;
        --root)
            # Execute script as root
            [ "$UID" != 0 ] && exec sudo "$0" "$@"
            ;;
    esac
done

# Read in all lines except those which start with a "#" or solely consist of
# zero or more whitespaces.
readarray -t ITEMS < <(grep -v "^#\|^\s*$" "$inputfile")

declare -a linksExist dirsExist othersExist
declare -i someExist
for item in "${ITEMS[@]}"; do
    dst="/$item"
    if [ -L "$dst" ]; then
        linksExist+=("$dst")
        someExist=1
    elif [ -d "$dst" ]; then
        dirsExist+=("$dst")
        someExist=1
    elif [ -e "$dst" ]; then
        othersExist+=("$dst")
        someExist=1
    fi
done

if [ $someExist = 1 ]; then
    if [ "${#linksExist}" != 0 ]; then
        addMessage "" "LINKS:"
        for item in "${linksExist[@]}"; do
            addMessage "$item"
        done
    fi
    if [ "${#dirsExist}" != 0 ]; then
        addMessage "" "DIRECTORIES:"
        for item in "${dirsExist[@]}"; do
            [ ! -e "$pwd/$item" ] && item+=" (will be copied)"
            addMessage "$item"
        done
    fi
    if [ "${#othersExist}" != 0 ]; then
        addMessage "" "OTHER FILES:"
        for item in "${othersExist[@]}"; do
            [ ! -e "$pwd/$item" ] && item+=" (will be copied)"
            addMessage "$item"
        done
    fi

    addMessage "" "Do you want to continue?"

    question "$(getMessage)"
fi

(
for item in "${ITEMS[@]}"; do
    src="$pwd/$item"
    dst="/$item"
    mkdir -p "${dst%/*}" || error "Could not create ${dst%/*}"
    if [ ! -e "$src" ]; then
        mkdir -p "${src%/*}" || error "Could not create ${src%/*}"
        cp -a "$dst" "$src" || error "Could not copy $dst to $src"
    fi
    rm -rf "$dst" || error "Could not delete $dst"
    mkdir -p "${dst%/*}" || error "Could not create ${dst%/*}"
    ln -s $optRelative "$src" "$dst" || error "Could not link $src to $dst"
    chown --no-dereference --reference="$src" "$dst" || \
        error "Could not change ownership of $dst"
done
) |
progress "Removing existing items and creating symlinks ..."
